sudo apt update && sudo apt upgrade

# Copy k3s folder to ~

# On Kube1
sudo apt install ansible nano 

# Create first server
curl -sfL https://get.k3s.io | K3S_TOKEN=***REMOVED*** sh -s - server --disable servicelb,traefik,local-storage --write-kubeconfig-mode 644 --disable-cloud-controller ## --disable-network-policy --flannel-backend=none

# Run next Ansible script
ansible-playbook ~/k3s-cloud/ansible-k3s-post.yaml --ask-become-pass

# Restart k3s on each node in turn
systemctl restart k3s

# Install Autocomplete
sudo apt install -y bash-completion
echo "source <(kubectl completion bash)" >> ~/.bashrc
source ~/.bashrc

# Install Helm
curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
sudo apt-get install apt-transport-https --yes
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
sudo apt-get update
sudo apt-get install helm

# Copy K3S config to home dir
sudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/config

# Install Cilium
export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
helm install cilium cilium/cilium --version 1.14.3 --namespace kube-system --values ~/k3s-cloud/cilium/values.yaml

# Configure IP Pool and L2 Announcements
kubectl apply -f ~/k3s-cloud/cilium/

# Install Cloudflare tunnel
kubectl create namespace cloudflare
kubectl apply -f ~/k3s-cloud/cloudflare-tunnel

# Install ArgoCD
helm repo add argocd https://argoproj.github.io/argo-helm
helm install argocd argocd/argo-cd --namespace=argocd --create-namespace --values ~/k3s-cloud/argocd/argocd-values.yaml
kubectl apply -f ~/k3s-cloud/argocd/

# Get initial ArgoCD password
kubectl -n argocd get secret argocd-initial-admin-secret \
          -o jsonpath="{.data.password}" | base64 -d; echo

# Get K3S token
kubectl -n default get secret api-service-account-secret \
          -o jsonpath="{.data.token}" | base64 -d; echo



######################################################################################
##                  Install remote admin tools on non-K3S server                    ##
######################################################################################
sudo curl -fsSLo /etc/apt/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt update
sudo apt install -y kubectl

mkdir ~/.kube
# copy k3s.yaml to file called "config" in .kube folder

# Install Autocomplete
sudo apt install -y bash-completion
echo "source <(kubectl completion bash)" >> ~/.bashrc
source ~/.bashrc



######################################################################################
## Everything below should get deployed via ArgoCD. The below is just for reference ##
######################################################################################

# Add local-path storage class
kubectl apply -f https://raw.githubusercontent.com/rancher/local-path-provisioner/v0.0.23/deploy/local-path-storage.yaml

# Install Prometheus/Grafana monitoring 
helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
helm repo update
helm install --create-namespace -n monitoring promstack prometheus-community/kube-prometheus-stack --values ~/k3s-cloud/monitoring/promstack-values.yaml
kubectl apply -f ~/k3s-cloud/monitoring/helm-ingress-prometheus.yaml
kubectl apply -f ~/k3s-cloud/monitoring/helm-ingress-alertmanager.yaml
kubectl apply -f ~/k3s-cloud/monitoring/helm-ingress-grafana.yaml
kubectl apply -f ~/k3s-cloud/monitoring/grafana-secrets.yaml

# Install MariaDB
helm repo add bitnami https://charts.bitnami.com/bitnami
kubectl apply -f ~/k3s-cloud/mariadb/pv.yaml
helm install --create-namespace -n mariadb mariadb -f ~/k3s-cloud/mariadb/values.yaml bitnami/mariadb-galera
helm install --create-namespace -n mariadb-standalone mariadb-standalone -f ~/k3s-cloud/mariadb-standalone/values bitnami/mariadb
kubectl apply -f ~/k3s-cloud/mariadb-backup/